# -*- shell-script -*-

# Copyright 2014 Kitsilano Software Inc.
#
# This file is part of MonoTizen.
#
# MonoTizen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# MonoTizen is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MonoTizen.  If not, see <http://www.gnu.org/licenses/>.

MONO_VM_TIZEN_2_2_TARBALL=tizen-2.2_20130719.3_RD-PQ.tar.gz
MONO_VM_TIZEN_2_2_BASE_URL=http://download.tizen.org/releases/2.2/tizen-2.2_20130719.3/images/RD-PQ/

MONO_VM_QEMU_ARGS='-M vexpress-a9 -m 1G'

MONO_VM_KERNEL=vexpress/vmlinuz-3.2.0-4-vexpress
MONO_VM_INITRD=vexpress/initrd.img-3.2.0-4-vexpress

function mono_vm_download {
    local downloads_dir="$1"; shift
    wget -O "$downloads_dir/$MONO_VM_TIZEN_2_2_TARBALL"                 \
        "$MONO_VM_TIZEN_2_2_BASE_URL/$MONO_VM_TIZEN_2_2_TARBALL"
}

function mono_vm_unpack {
    local downloads_dir="$1"; shift
    local unpack_dir="$1"; shift
    tar xzvf "$downloads_dir/$MONO_VM_TIZEN_2_2_TARBALL" -C "$unpack_dir"
}

function mono_vm__guestfish_pristine {
    local unpack_dir="$1"; shift
    local image="$1"; shift

    # A couple of useful constants.
    local gb_bytes="$((1024 * 1024 * 1024))"
    local gb_sectors="$(($gb_bytes / 512))"

    # Our partitions, in sectors.  We start where fdisk usually
    # starts, and create "big enough" partitions.  KLUDGE: We also
    # create a "sacrificial" partition because one of the bootup
    # scripts wants to truncate it--for some reason.
    local start_1='2048'
    local start_2="$(($start_1 + 10 * $gb_sectors))"
    local start_3="$(($start_2 + 2 * $gb_sectors))"
    local start_4="$(($start_3 + 2 * $gb_sectors))"

    guestfish <<EOF
# Target image
add $image
# Source partition images
add-ro $unpack_dir/platform.img
add-ro $unpack_dir/ums.img
add-ro $unpack_dir/data.img
# Start VM
run
# Partitioning
part-init /dev/sda msdos
part-add /dev/sda p $start_1 $(($start_2 - 1))
part-add /dev/sda p $start_2 $(($start_3 - 1))
part-add /dev/sda p $start_3 $(($start_4 - 1))
part-add /dev/sda p $start_4 -1
# Imaging
copy-device-to-device /dev/sdb /dev/sda1 sparse:true
copy-device-to-device /dev/sdc /dev/sda2 sparse:true
copy-device-to-device /dev/sdd /dev/sda3 sparse:true
# Extract some of the image data that we're going to patch
mount-ro /dev/sda1 /
tar-out /etc $unpack_dir/etc.tar
EOF
}

function mono_vm__guestfish_fsck {
    local image="$1"; shift

    for part in 1 2 3; do
        # Guestfish aborts and returns a failure despite correct:true;
        # we just ignore that and run one instance per partition
        # (we'll fail later if repair did not succeed).
        (guestfish || true) <<EOF
add $image
run
e2fsck /dev/sda$part correct:true
EOF
    done
}

function mono_vm__guestfish_setup {
    local image="$1"; shift

    guestfish <<EOF
# Target image
add $image
# Start VM
run
# Spread FSes to fill their partitions
resize2fs /dev/sda1
resize2fs /dev/sda2
resize2fs /dev/sda3
# Mount root
mount /dev/sda1 /
write-append /etc/group "mono-tizen:x:9999:\n"
write-append /etc/passwd "mono-tizen:::/home/mono-tizen:/bin/sh\n"
rm /etc/profile.d/Xorg.sh
EOF
}

function mono_vm_make_disk {
    local downloads_dir="$1"; shift
    local unpack_dir="$1"; shift
    local image_dir="$1"; shift
    local prefix="$1"; shift
    local pristine_img="$prefix-pristine.qcow2"
    local base_img="$prefix.qcow2"

    qemu-img create -f qcow2 "$image_dir/$pristine_img" 25G
    mono_vm__guestfish_pristine "$unpack_dir" "$image_dir/$pristine_img"
    (
        cd "$image_dir"
        qemu-img create -f qcow2 -o backing_file="$pristine_img" "$base_img"
    )
    # KLUDGE: The Tizen images are not clean, so we need to fsck them.
    mono_vm__guestfish_fsck "$image_dir/$base_img"
    mono_vm__guestfish_setup "$image_dir/$base_img"
}
